//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FisioterapiaUlatskawa.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Context : DbContext
    {
        public Context()
            : base("name=Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Antecedente> Antecedentes { get; set; }
        public virtual DbSet<Enfermedade> Enfermedades { get; set; }
        public virtual DbSet<Inventario> Inventarios { get; set; }
        public virtual DbSet<Pago> Pagos { get; set; }
        public virtual DbSet<TipoPago> TipoPagoes { get; set; }
        public virtual DbSet<TipoProducto> TipoProductoes { get; set; }
        public virtual DbSet<TipoUsuario> TipoUsuarios { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }
    
        public virtual ObjectResult<string> ActualizarAntecedente(Nullable<int> pIdAntecedentes, string pNombreAntecedentes, string pCedula)
        {
            var pIdAntecedentesParameter = pIdAntecedentes.HasValue ?
                new ObjectParameter("pIdAntecedentes", pIdAntecedentes) :
                new ObjectParameter("pIdAntecedentes", typeof(int));
    
            var pNombreAntecedentesParameter = pNombreAntecedentes != null ?
                new ObjectParameter("pNombreAntecedentes", pNombreAntecedentes) :
                new ObjectParameter("pNombreAntecedentes", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActualizarAntecedente", pIdAntecedentesParameter, pNombreAntecedentesParameter, pCedulaParameter);
        }
    
        public virtual ObjectResult<string> ActualizarEnfermedad(Nullable<int> pIdEnfermedad, string pNombreEnfermedad, string pCedula)
        {
            var pIdEnfermedadParameter = pIdEnfermedad.HasValue ?
                new ObjectParameter("pIdEnfermedad", pIdEnfermedad) :
                new ObjectParameter("pIdEnfermedad", typeof(int));
    
            var pNombreEnfermedadParameter = pNombreEnfermedad != null ?
                new ObjectParameter("pNombreEnfermedad", pNombreEnfermedad) :
                new ObjectParameter("pNombreEnfermedad", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActualizarEnfermedad", pIdEnfermedadParameter, pNombreEnfermedadParameter, pCedulaParameter);
        }
    
        public virtual ObjectResult<string> ActualizarPagos(Nullable<int> pIdPago, Nullable<int> pTipoPago, Nullable<double> pMonto, string pBanco, string pCedula, string pNotas)
        {
            var pIdPagoParameter = pIdPago.HasValue ?
                new ObjectParameter("pIdPago", pIdPago) :
                new ObjectParameter("pIdPago", typeof(int));
    
            var pTipoPagoParameter = pTipoPago.HasValue ?
                new ObjectParameter("pTipoPago", pTipoPago) :
                new ObjectParameter("pTipoPago", typeof(int));
    
            var pMontoParameter = pMonto.HasValue ?
                new ObjectParameter("pMonto", pMonto) :
                new ObjectParameter("pMonto", typeof(double));
    
            var pBancoParameter = pBanco != null ?
                new ObjectParameter("pBanco", pBanco) :
                new ObjectParameter("pBanco", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            var pNotasParameter = pNotas != null ?
                new ObjectParameter("pNotas", pNotas) :
                new ObjectParameter("pNotas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActualizarPagos", pIdPagoParameter, pTipoPagoParameter, pMontoParameter, pBancoParameter, pCedulaParameter, pNotasParameter);
        }
    
        public virtual ObjectResult<string> ActualizarProductos(Nullable<int> pIdProducto, Nullable<int> pTipoProducto, string pNombreProducto, string pCodigoBarras, string pPrecio, Nullable<int> pCantidad, Nullable<System.DateTime> pFechaExpiracion, string pNotas)
        {
            var pIdProductoParameter = pIdProducto.HasValue ?
                new ObjectParameter("pIdProducto", pIdProducto) :
                new ObjectParameter("pIdProducto", typeof(int));
    
            var pTipoProductoParameter = pTipoProducto.HasValue ?
                new ObjectParameter("pTipoProducto", pTipoProducto) :
                new ObjectParameter("pTipoProducto", typeof(int));
    
            var pNombreProductoParameter = pNombreProducto != null ?
                new ObjectParameter("pNombreProducto", pNombreProducto) :
                new ObjectParameter("pNombreProducto", typeof(string));
    
            var pCodigoBarrasParameter = pCodigoBarras != null ?
                new ObjectParameter("pCodigoBarras", pCodigoBarras) :
                new ObjectParameter("pCodigoBarras", typeof(string));
    
            var pPrecioParameter = pPrecio != null ?
                new ObjectParameter("pPrecio", pPrecio) :
                new ObjectParameter("pPrecio", typeof(string));
    
            var pCantidadParameter = pCantidad.HasValue ?
                new ObjectParameter("pCantidad", pCantidad) :
                new ObjectParameter("pCantidad", typeof(int));
    
            var pFechaExpiracionParameter = pFechaExpiracion.HasValue ?
                new ObjectParameter("pFechaExpiracion", pFechaExpiracion) :
                new ObjectParameter("pFechaExpiracion", typeof(System.DateTime));
    
            var pNotasParameter = pNotas != null ?
                new ObjectParameter("pNotas", pNotas) :
                new ObjectParameter("pNotas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActualizarProductos", pIdProductoParameter, pTipoProductoParameter, pNombreProductoParameter, pCodigoBarrasParameter, pPrecioParameter, pCantidadParameter, pFechaExpiracionParameter, pNotasParameter);
        }
    
        public virtual ObjectResult<string> ActualizarUsuarios(string pCedula, string pNombre, string pApellidos, string pTelefono, string pEmail, string pContrasenna, Nullable<int> pIdTipoUsuario)
        {
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            var pNombreParameter = pNombre != null ?
                new ObjectParameter("pNombre", pNombre) :
                new ObjectParameter("pNombre", typeof(string));
    
            var pApellidosParameter = pApellidos != null ?
                new ObjectParameter("pApellidos", pApellidos) :
                new ObjectParameter("pApellidos", typeof(string));
    
            var pTelefonoParameter = pTelefono != null ?
                new ObjectParameter("pTelefono", pTelefono) :
                new ObjectParameter("pTelefono", typeof(string));
    
            var pEmailParameter = pEmail != null ?
                new ObjectParameter("pEmail", pEmail) :
                new ObjectParameter("pEmail", typeof(string));
    
            var pContrasennaParameter = pContrasenna != null ?
                new ObjectParameter("pContrasenna", pContrasenna) :
                new ObjectParameter("pContrasenna", typeof(string));
    
            var pIdTipoUsuarioParameter = pIdTipoUsuario.HasValue ?
                new ObjectParameter("pIdTipoUsuario", pIdTipoUsuario) :
                new ObjectParameter("pIdTipoUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ActualizarUsuarios", pCedulaParameter, pNombreParameter, pApellidosParameter, pTelefonoParameter, pEmailParameter, pContrasennaParameter, pIdTipoUsuarioParameter);
        }
    
        public virtual ObjectResult<ConsultaProducto_Result> ConsultaProducto(string pCodigoBarras)
        {
            var pCodigoBarrasParameter = pCodigoBarras != null ?
                new ObjectParameter("pCodigoBarras", pCodigoBarras) :
                new ObjectParameter("pCodigoBarras", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultaProducto_Result>("ConsultaProducto", pCodigoBarrasParameter);
        }
    
        public virtual ObjectResult<ConsultarAntecedente_Result> ConsultarAntecedente(Nullable<int> pIdAntecedente)
        {
            var pIdAntecedenteParameter = pIdAntecedente.HasValue ?
                new ObjectParameter("pIdAntecedente", pIdAntecedente) :
                new ObjectParameter("pIdAntecedente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarAntecedente_Result>("ConsultarAntecedente", pIdAntecedenteParameter);
        }
    
        public virtual ObjectResult<ConsultarEnfermedad_Result> ConsultarEnfermedad(Nullable<int> pIdEnfermedad)
        {
            var pIdEnfermedadParameter = pIdEnfermedad.HasValue ?
                new ObjectParameter("pIdEnfermedad", pIdEnfermedad) :
                new ObjectParameter("pIdEnfermedad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarEnfermedad_Result>("ConsultarEnfermedad", pIdEnfermedadParameter);
        }
    
        public virtual ObjectResult<ConsultarPagos_Result> ConsultarPagos(Nullable<int> pIdPago)
        {
            var pIdPagoParameter = pIdPago.HasValue ?
                new ObjectParameter("pIdPago", pIdPago) :
                new ObjectParameter("pIdPago", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarPagos_Result>("ConsultarPagos", pIdPagoParameter);
        }
    
        public virtual ObjectResult<ConsultaUsuario_Result> ConsultaUsuario(string pIdUsuario)
        {
            var pIdUsuarioParameter = pIdUsuario != null ?
                new ObjectParameter("pIdUsuario", pIdUsuario) :
                new ObjectParameter("pIdUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultaUsuario_Result>("ConsultaUsuario", pIdUsuarioParameter);
        }
    
        public virtual ObjectResult<string> InsertarAntecedente(Nullable<int> pIdAntecedente, string pNombreAntecedente, string pCedula)
        {
            var pIdAntecedenteParameter = pIdAntecedente.HasValue ?
                new ObjectParameter("pIdAntecedente", pIdAntecedente) :
                new ObjectParameter("pIdAntecedente", typeof(int));
    
            var pNombreAntecedenteParameter = pNombreAntecedente != null ?
                new ObjectParameter("pNombreAntecedente", pNombreAntecedente) :
                new ObjectParameter("pNombreAntecedente", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertarAntecedente", pIdAntecedenteParameter, pNombreAntecedenteParameter, pCedulaParameter);
        }
    
        public virtual ObjectResult<string> InsertarEnfermedad(Nullable<int> pIdEnfermedad, string pNombreEnfermedad, string pCedula)
        {
            var pIdEnfermedadParameter = pIdEnfermedad.HasValue ?
                new ObjectParameter("pIdEnfermedad", pIdEnfermedad) :
                new ObjectParameter("pIdEnfermedad", typeof(int));
    
            var pNombreEnfermedadParameter = pNombreEnfermedad != null ?
                new ObjectParameter("pNombreEnfermedad", pNombreEnfermedad) :
                new ObjectParameter("pNombreEnfermedad", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertarEnfermedad", pIdEnfermedadParameter, pNombreEnfermedadParameter, pCedulaParameter);
        }
    
        public virtual ObjectResult<string> InsertarPagos(Nullable<int> pTipoPago, Nullable<double> pMonto, string pBanco, string pCedula, string pNotas)
        {
            var pTipoPagoParameter = pTipoPago.HasValue ?
                new ObjectParameter("pTipoPago", pTipoPago) :
                new ObjectParameter("pTipoPago", typeof(int));
    
            var pMontoParameter = pMonto.HasValue ?
                new ObjectParameter("pMonto", pMonto) :
                new ObjectParameter("pMonto", typeof(double));
    
            var pBancoParameter = pBanco != null ?
                new ObjectParameter("pBanco", pBanco) :
                new ObjectParameter("pBanco", typeof(string));
    
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            var pNotasParameter = pNotas != null ?
                new ObjectParameter("pNotas", pNotas) :
                new ObjectParameter("pNotas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertarPagos", pTipoPagoParameter, pMontoParameter, pBancoParameter, pCedulaParameter, pNotasParameter);
        }
    
        public virtual ObjectResult<string> InsertarProducto(Nullable<int> pTipoProducto, string pNombreProducto, string pCodigoBarras, string pPrecio, Nullable<int> pCantidad, Nullable<System.DateTime> pFechaExpiracion, string pNotas)
        {
            var pTipoProductoParameter = pTipoProducto.HasValue ?
                new ObjectParameter("pTipoProducto", pTipoProducto) :
                new ObjectParameter("pTipoProducto", typeof(int));
    
            var pNombreProductoParameter = pNombreProducto != null ?
                new ObjectParameter("pNombreProducto", pNombreProducto) :
                new ObjectParameter("pNombreProducto", typeof(string));
    
            var pCodigoBarrasParameter = pCodigoBarras != null ?
                new ObjectParameter("pCodigoBarras", pCodigoBarras) :
                new ObjectParameter("pCodigoBarras", typeof(string));
    
            var pPrecioParameter = pPrecio != null ?
                new ObjectParameter("pPrecio", pPrecio) :
                new ObjectParameter("pPrecio", typeof(string));
    
            var pCantidadParameter = pCantidad.HasValue ?
                new ObjectParameter("pCantidad", pCantidad) :
                new ObjectParameter("pCantidad", typeof(int));
    
            var pFechaExpiracionParameter = pFechaExpiracion.HasValue ?
                new ObjectParameter("pFechaExpiracion", pFechaExpiracion) :
                new ObjectParameter("pFechaExpiracion", typeof(System.DateTime));
    
            var pNotasParameter = pNotas != null ?
                new ObjectParameter("pNotas", pNotas) :
                new ObjectParameter("pNotas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertarProducto", pTipoProductoParameter, pNombreProductoParameter, pCodigoBarrasParameter, pPrecioParameter, pCantidadParameter, pFechaExpiracionParameter, pNotasParameter);
        }
    
        public virtual ObjectResult<string> InsertarUsuario(string pCedula, string pNombre, string pApellidos, string pTelefono, string pEmail, string pContrasenna, Nullable<int> pIdTipoUsuario)
        {
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            var pNombreParameter = pNombre != null ?
                new ObjectParameter("pNombre", pNombre) :
                new ObjectParameter("pNombre", typeof(string));
    
            var pApellidosParameter = pApellidos != null ?
                new ObjectParameter("pApellidos", pApellidos) :
                new ObjectParameter("pApellidos", typeof(string));
    
            var pTelefonoParameter = pTelefono != null ?
                new ObjectParameter("pTelefono", pTelefono) :
                new ObjectParameter("pTelefono", typeof(string));
    
            var pEmailParameter = pEmail != null ?
                new ObjectParameter("pEmail", pEmail) :
                new ObjectParameter("pEmail", typeof(string));
    
            var pContrasennaParameter = pContrasenna != null ?
                new ObjectParameter("pContrasenna", pContrasenna) :
                new ObjectParameter("pContrasenna", typeof(string));
    
            var pIdTipoUsuarioParameter = pIdTipoUsuario.HasValue ?
                new ObjectParameter("pIdTipoUsuario", pIdTipoUsuario) :
                new ObjectParameter("pIdTipoUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertarUsuario", pCedulaParameter, pNombreParameter, pApellidosParameter, pTelefonoParameter, pEmailParameter, pContrasennaParameter, pIdTipoUsuarioParameter);
        }
    
        public virtual ObjectResult<ListarAntecedentes_Result> ListarAntecedentes(string pCedula)
        {
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarAntecedentes_Result>("ListarAntecedentes", pCedulaParameter);
        }
    
        public virtual ObjectResult<ListarEnfermedades_Result> ListarEnfermedades(string pCedula)
        {
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarEnfermedades_Result>("ListarEnfermedades", pCedulaParameter);
        }
    
        public virtual ObjectResult<ListarMisPagos_Result> ListarMisPagos(string pCedula)
        {
            var pCedulaParameter = pCedula != null ?
                new ObjectParameter("pCedula", pCedula) :
                new ObjectParameter("pCedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarMisPagos_Result>("ListarMisPagos", pCedulaParameter);
        }
    
        public virtual ObjectResult<ListarPagos_Result> ListarPagos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarPagos_Result>("ListarPagos");
        }
    
        public virtual ObjectResult<ListarProdcutos_Result> ListarProdcutos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarProdcutos_Result>("ListarProdcutos");
        }
    
        public virtual ObjectResult<ListarTipoPagos_Result> ListarTipoPagos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarTipoPagos_Result>("ListarTipoPagos");
        }
    
        public virtual ObjectResult<ListarTipoProducto_Result> ListarTipoProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarTipoProducto_Result>("ListarTipoProducto");
        }
    
        public virtual ObjectResult<ListarUsuarios_Result> ListarUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarUsuarios_Result>("ListarUsuarios");
        }
    }
}
